library(Seurat)
library(dplyr)
install.packages('Seurat')
library(Seurat)
install.packages('plotly')
install.packages('httr')
install.packages('httr')
install.packages('curl')
install.packages('curl')
install.packages('Seurat')
install.packages('Seurat')
library(Seurat)
library(dplyr)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/analysis/find_clusters_10x.r', echo=TRUE)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/analysis/find_clusters_10x.r', echo=TRUE)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/analysis/find_clusters_10x.r', echo=TRUE)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/analysis/find_clusters_10x.r', echo=TRUE)
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
pbmc <- FindClusters(object = pbmc.data, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data
pbmc <- CreateSeuratObject(raw.data = pbmc.data, min.cells = 3, min.genes = 200,
project = "10X_merge")
x=10
pbmc <- CreateSeuratObject(raw.data = pbmc.data, min.cells = 3, min.genes = 200, project = "10X_merge")
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10, resolution = 0.6, print.output = 0, save.SNN = TRUE)
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
par(mfrow = c(1, 2))
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "nGene")
pbmc <- FilterCells(object = pbmc, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(5000, 0.05))
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10, resolution = 0.6, print.output = 0, save.SNN = TRUE)
pbmc <- NormalizeData(object = pbmc, normalization.method = "LogNormalize",
scale.factor = 10000)
pbmc <- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
pbmc <- ScaleData(object = pbmc, vars.to.regress = c("nUMI", "percent.mito"))
pbmc <- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
pbmc <- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5)
pbmc$ScaleData
pbmc <- FindVariableGenes(object = pbmc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = pbmc@var.genes)
pbmc <- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5)
PCAPlot(object = pbmc, dim.1 = 1, dim.2 = 2)
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
PrintFindClustersParams(object = pbmc)
pbmc <- RunTSNE(object = pbmc, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = pbmc)
functionBody(FindClusters)
functionBody(BuildSNN)
library(DESeq2)
install.packages(DESeq2)
install.packages('DESeq2')
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite("DESeq2")
biocLite("DESeq2")
library(DESeq2)
biocLite("DESeq2")
library(DESeq2)
setwd("/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5")
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
b=read.csv(file, sep="\t",row.names=0, header=T)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
b=read.csv(file, sep="\t")
View(b)
View(b)
b=read.csv(file, sep="\t", row.names=0)
b=read.csv(file, sep="\t", row.names=0)
b=read.tab;e(file, sep="\t", row.names=0)
b=read.tablee(file, sep="\t", row.names=0)
b=read.table(file, sep="\t", row.names=0)
b=read.table(file, sep="\t", row.names=0, header=T)
b=read.table(file, sep="\t", row.names="Human Gene Symbol", header=T)
b=read.table(file, sep="\t", row.names=0, header=T)
b=read.table(file, sep="\t", row.names=0, header=T)
b=read.table(file, sep="\t", row.names=0, header=T)
b=read.table(file, sep="\t")
b=read.table(file, sep="\t", row.names=0)
b=read.table(file, sep="\t", row.names=1)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
View(cts)
View(cts)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
View(cts)
View(cts)
colData <- DataFrame(condition=factor(c("WT","WT","WT","WT","HET","HET","HET","HET","D83V","D83V","D83V","D83V","KO-D83V","KO-D83V","KO-D83V","KO-D83V")))
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
dds <- DESeqDataSetFromMatrix(cts, colData, formula ~ condition)
View(cts)
View(cts)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
library("pasilla")
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
samples = read.table("sample_name.txt", header=TRUE)
samples$condition = factor(c("WT","WT","WT","WT","D83V","D83V","D83V","D83V"))
samples = read.table("sample_name.txt", header=TRUE)
samples = read.table("sample_names.txt", header=TRUE)
samples$condition = factor(c("WT","WT","WT","WT","D83V","D83V","D83V","D83V"))
head(samples)
samples = read.table("sample_names.txt", header=TRUE, sep="\t")
samples$condition = factor(c("WT","WT","WT","WT","D83V","D83V","D83V","D83V
)
)
)
)
d
s
samples = read.table("sample_names.txt", header=TRUE, sep="\t")
samples$condition = factor(c("WT","WT","WT","WT","D83V","D83V","D83V","D83V"))
samples
samples = read.table("sample_names.txt", header=TRUE, sep="\t", row.names=1)
samples$condition = factor(c("WT","WT","WT","WT","D83V","D83V","D83V","D83V"))
samples
dds <- DESeqDataSetFromMatrix(cts, colData = samples, design ~ condition)
samples
dds = DESeqDataSetFromMatrix(countData = cts, colData = samples, design = ~ condition)
colnames(cts)
rownames(samples)
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/run_deseq.r', echo=TRUE)
dds = DESeq(dds)
res = results(dds)
res_ordered = res[order(res$padj),]
head(res_ordered)
write.csv(res, 'deseq2_results.txt')
write.csv(res, 'deseq2_results.txt', sep='\t')
write.table(res, 'deseq2_results.txt', sep='\t')
write.table(res, 'deseq2_results.txt', sep='\t', col.names = NA, row.names=T)
dds
View(dds)
View(dds)
c=counts(dds)
head(c)
c = counts(dds, normalized=T)
head(c)
write.table(c, 'test.txt', sep='\t', col.names = NA, row.names=T)
setwd("/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/deseq2")
source('/ifs/scratch/cancer/Lab_RDF/abh2138/RNA_seq/data/samples/mouse/rdf/RK3035_RK3050_MEF2B_20171208/k5/deseq2/run_deseq.r', echo=TRUE)
library(SC2P)
data(brain_scRNAseq)
design$celltype
file = '/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/data/samples/human/10X/rdf/restricted_grch38/RK10001-RK10003/rk10001_rk10003_tpm_log2.txt'
samples = read.table(file, header=T, sep='\t', row.names=1, check.names=F)
setwd('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/data/samples/human/10X/rdf/restricted_grch38/RK10001-RK10003/blob/outs')
function(plot_cell_trajectory)
)
function('plot_cell_trajectory'')
function('plot_cell_trajectory')
function(plot_cell_trajectory)
)
plot_cell_trajectory
plot_cell_trajectory
d=read.table('cluster_colors.txt', sep='\t', header=T)
pwd
getwd()
setwd('ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/data/samples/human/10X/rdf/restricted_grch38/RK100013')
setwd('ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/data/samples/human/10X/rdf/restricted_grch38/RK10003')
setwd('/ifs/scratch/cancer/Lab_RDF/abh2138/scRNA/data/samples/human/10X/rdf/restricted_grch38/RK10003')
d=read.table('cluster_colors.txt', sep='\t', header=T)
d=read.table('cluster_colors.txt', sep='\t', row.names = F)
d=read.table('cluster_colors.txt', sep='\t', row.names = F, col.names = T)
d=read.table('cluster_colors.txt', sep='\t', row.names = F, col.names = T)
d=read.table('cluster_colors.txt', sep='\t', header=T)
d
colors = rgb(d[,1], d[,2],d[,3],1)
colors
load_colors <- function() {
d = read.table('cluster_colors.txt', sep='\t', header=T)
return rgb(d[,1], d[,2],d[,3],1)
}
load_colors <- function() {
d = read.table('cluster_colors.txt', sep='\t', header=T)
return(rgb(d[,1], d[,2],d[,3],1))
}
colors=load_colors()
length(unique(HSMM$Cluster))
setwd('/ifs/home/cancer/Lab_RDF/Personal/Antony/ChIP_seq/katia/mef2b/enhancer_classification_with_rna_seq_20180616')
pwd
iqr1 = read.table('iqr1.txt', sep='\t',)
iqr1
iqr2 = read.table('iqr2.txt', sep='\t',)
wilcox.test(iqr1, iqr2,alternative = 'two.sided')
wilcox.test(iqr1[,1], iqr2[,1],alternative = 'two.sided')
iqr2 = as.matrix(read.table('iqr2.txt', sep='\t'))
iqr1 = as.matrix(read.table('iqr1.txt', sep='\t'))
wilcox.test(iqr1[,1], iqr2[,1],alternative = 'two.sided')
iqr1[,1]
iqr1 = as.matrix(read.table('iqr1.txt', sep='\t', header=T))
iqr2 = as.matrix(read.table('iqr2.txt', sep='\t', header=T))
iqr1[,1]
wilcox.test(iqr1[,1], iqr2[,1],alternative = 'two.sided')
library(viper)
if (!requireNamespace("BiocManager", quietly=TRUE))
+ install.packages("BiocManager")
bcellViper
library(bCellViper)
BiocManager::install("mixtools")
install.packages("BiocManager")
install.packages("BiocManager")
require('DESeq2')
x=require('DESeq2')
x
setwd('/ifs/scratch/cancer/Lab_RDF/abh2138/ChIP_seq/data/samples/hg19/rdf/elodie/counts_table_mcr')
coldata = as.data.frame(read.csv('phenotypes.txt', sep='\t', row.names=1, header=T, check.names = FALSE))
coldata
cols(coldata)
dim(coldata)
dim(coldata)[1]
dim(coldata)[2]
coldata = as.data.frame(read.csv('phenotypes.txt', sep='\t', header=T, check.names = FALSE))
coldata
coldata$Sample[2]
x=coldata$Sample[2]
x
x=coldata[1,2]
x
coldata = read.csv('phenotypes.txt', sep='\t', header=T, check.names = FALSE)
coldata
x=coldata[1,2]
x
coldata = read.csv('phenotypes.txt', sep='\t', header=T, check.names = FALSE, stringsAsFactors = FALSE)
x=coldata[1,2]
x=coldata[1,2]
x
x=coldata$Sample[2]
x
setwd('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/tmp/')
setwd('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/tmp/')
groups = read.csv('groups.txt', sep='\t', header=T, check.names = F, stringsAsFactors = F)
for (i in 0:dim(groups)[1]) {
ds(cts, coldata, groups$group1[i], groups$group2[i])
}
for (i in 0:dim(groups)[1]) {
paste(groups$group1[i], groups$group2[i])
}
x=2
x
dim(groups)[1]
dim(groups)[2]
groups$group1
groups$group2
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names='location', header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
setwd('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/')
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names='location', header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names=1, header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
head(cts)
head(coldata)
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names=1, header=T, check.names = F))
cts
s <- function(cts, coldata, p1, p2) {
# the columns of interest
cols = which(coldata$phenotype == p1 | coldata$phenotype == p2)
data = cts[ ,cols, drop=F]
cd = coldata[cols,, drop=F]
p1cols = which(cd$phenotype == p1)
p2cols = which(cd$phenotype == p2)
dds <- DESeqDataSetFromMatrix(countData = data,
colData = cd,
design = ~ phenotype)
dds$phenotype = factor(dds$phenotype, c(p2, p1))
dds = DESeq(dds)
res = results(dds)
# since output from deseq is not overly helpful, lets make
# a revised table
counts = counts(dds, normalized=T)
p1counts = counts[, p1cols, drop=F]
p2counts = counts[, p2cols, drop=F]
p1means = unname(rowMeans(p1counts + 1))
p2means = unname(rowMeans(p2counts + 1))
fc = log2(p1means + 1) - log2(p2means + 1)
df = data.frame(cbind(row.names(counts), res$pvalue, res$padj, fc, p1means, p2means))
colnames(df) = c('Gene', 'P-value', 'FDR', 'Log2 Fold Change', paste(p1, 'Mean'), paste(p2, 'Mean'))
write.table(df, file=paste('tmp/deseq2_', p1, '_vs_', p2, '.txt', sep=''), sep='\t', col.names=T, row.names = F)
}
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names=1, header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ phenotype)
dds <- estimateSizeFactors(dds)
counts = counts(dds, normalized=T)
write.table(counts, file='tmp/counts_deseq2_normalized.txt', sep='\t', col.names=NA, row.names = T)
groups = read.csv('tmp/groups.txt', sep='\t', header=T, check.names = F, stringsAsFactors = F)
for (i in 0:dim(groups)[1]) {
ds(cts, coldata, groups$group1[i], groups$group2[i])
}
ds <- function(cts, coldata, p1, p2) {
# the columns of interest
cols = which(coldata$phenotype == p1 | coldata$phenotype == p2)
data = cts[ ,cols, drop=F]
cd = coldata[cols,, drop=F]
p1cols = which(cd$phenotype == p1)
p2cols = which(cd$phenotype == p2)
dds <- DESeqDataSetFromMatrix(countData = data,
colData = cd,
design = ~ phenotype)
dds$phenotype = factor(dds$phenotype, c(p2, p1))
dds = DESeq(dds)
res = results(dds)
# since output from deseq is not overly helpful, lets make
# a revised table
counts = counts(dds, normalized=T)
p1counts = counts[, p1cols, drop=F]
p2counts = counts[, p2cols, drop=F]
p1means = unname(rowMeans(p1counts + 1))
p2means = unname(rowMeans(p2counts + 1))
fc = log2(p1means + 1) - log2(p2means + 1)
df = data.frame(cbind(row.names(counts), res$pvalue, res$padj, fc, p1means, p2means))
colnames(df) = c('Gene', 'P-value', 'FDR', 'Log2 Fold Change', paste(p1, 'Mean'), paste(p2, 'Mean'))
write.table(df, file=paste('tmp/deseq2_', p1, '_vs_', p2, '.txt', sep=''), sep='\t', col.names=T, row.names = F)
}
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names=1, header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ phenotype)
dds <- estimateSizeFactors(dds)
counts = counts(dds, normalized=T)
write.table(counts, file='tmp/counts_deseq2_normalized.txt', sep='\t', col.names=NA, row.names = T)
groups = read.csv('tmp/groups.txt', sep='\t', header=T, check.names = F, stringsAsFactors = F)
for (i in 0:dim(groups)[1]) {
ds(cts, coldata, groups$group1[i], groups$group2[i])
}
source('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/res/scripts/r/deseq2.r', echo=TRUE)
source('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/res/scripts/r/deseq2.r', echo=TRUE)
groups$group1[i]
groups$group1[1]
groups$group1[3]
source('/ifs/home/cancer/Lab_RDF/Personal/Antony/source_code/java/git/edu.columbia.rdf.matcalc.toolbox.deseq2.app/edu.columbia.rdf.matcalc.toolbox.deseq2.app/res/scripts/r/deseq2.r', echo=TRUE)
cts = as.matrix(read.csv('tmp/counts.txt', sep='\t', row.names=1, header=T, check.names = F))
coldata = as.data.frame(read.csv('tmp/phenotypes.txt', sep='\t', row.names=1, header=T, check.names = F))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ phenotype)
